#!/bin/bash

source ./hooks/lib/common.sh

#Do not execute 'set -e' here because we are handling errors explicitily
#set -e 

ovsbridge=$(config-get n1kv-bridge-name)
physicalinterfaceforovs=$(config-get n1kv-phy-intf-bridge)
consolepts=$(config-get n1kv-vsm-console-pts)
vsmrole=$(config-get n1kv-vsm-role)
domainid=$(config-get n1kv-vsm-domain-id)
adminpasswd=$(config-get n1kv-vsm-password)
mgmtip=$(config-get n1kv-vsm-mgmt-ip)
mgmtnetmask=$(config-get n1kv-vsm-mgmt-netmask)
mgmtgateway=$(config-get n1kv-vsm-mgmt-gateway)
VSM_CTRL_IF=$(config-get n1kv-vsm-ctrl-interface)
VSM_MGMT_IF=$(config-get n1kv-vsm-mgmt-interface)
VSM_PKT_IF=$(config-get n1kv-vsm-pkt-interface)
vcpu=$(config-get n1kv-vsm-vm-vcpu)
disksize=$(config-get n1kv-vsm-disk-size)
VERSION=$(config-get n1kv-version)
LOCAL_REPO=$(config-get n1kv-local-repo)

finaliso=${VSM_VM_DIR}/${vsmrole}_repacked.iso
diskfile=${VSM_VM_DIR}/${vsmrole}_disk
isofilepath=${VSM_ISO_DIR}

export physicalinterfaceforovs ovsbridge
export nodeip nodenetmask nodegateway nodedns
export diskfile disksize consolepts isofilepath VSM_ISO finaliso
export domainid mgmtip mgmtnetmask mgmtgateway adminpasswd vsmrole
export VSM_MEM_STR VSM_CTRL_IF VSM_MGMT_IF VSM_PKT_IF vcpu
export VSM_CMAC_STR VSM_MMAC_STR VSM_PMAC_STR VSM_VNC_PORT VSM_VNC_AUTO


#start the openvswitch
function start_openvswitch
{
    local br=$(ovs-vsctl show 2>&1 | grep -c "Bridge $ovsbridge")

    if [ $br -ne 0 ]; then
        juju-log "ovs already started"
        return 1
    fi
    juju-log "Start the openvswitch process"
    /usr/sbin/service openvswitch-switch start

    set -e
    juju-log "Add the ovs bridge"
    /usr/bin/ovs-vsctl -- --may-exist add-br $ovsbridge
    /usr/bin/ovs-vsctl -- --may-exist add-port $ovsbridge $physicalinterfaceforovs
    /sbin/brctl delif br0 $physicalinterfaceforovs
    set +e
    juju-log "Added ovs bridge $br"
    ifconfig br0 0.0.0.0 0.0.0.0
    /usr/sbin/service openvswitch-switch restart

    return 0
}

#Move the phsical interface to ovs bridge
function update_ovs_interfaces
{
    set -e
    juju-log "Move the physical interface to ovs bridge and restart network"

    juju-log "using eth-config.tmpl to create eth-config"
    cheetah fill --env --oext compiled templates/eth-config.tmpl
    juju-log "copy the compiled template to /etc/network/"
    cp templates/eth-config.compiled /etc/network/interfaces

    juju-log "unset the ip address for physical interface"
    ifconfig ${physicalinterfaceforovs} 0.0.0.0 0.0.0.0

    juju-log "restart the networking service"
    /etc/init.d/networking restart
    set +e
}

#Find the name of nexus vsm iso
function get_vsm_iso_filename
{
    local isofile files

    juju-log "Determine the file of nexus vsm iso in $isofilepath"
    files=( ${isofilepath}/*.iso )
    for file in "${files[@]}"
    do
        isofile="${file}"
        juju-log "vsm isofile is $isofile"
        break
    done
    VSM_ISO=$isofile
    if [ ! -f ${VSM_ISO} ]; then
        juju-log "vsm-iso ${VSM_ISO} does not exists"
        return 1
    fi
    return 0
}

#Repack the nexus 1k iso
function repack_iso
{
    juju-log "Repack the VSM ISO with the setup script environment variables"
    pwd
    if [ "${vsmrole}" == "secondary" ]; then
        mgmtip="0.0.0.0"
        mgmtnetmask="0.0.0.0"
        mgmtgateway="0.0.0.0"
    fi
    if [ $adminpasswd == "" ]; then
        print "Error: invalid vsm admin password"
        return 1
    fi
    if [ $mgmtip == "" ]; then
        print "Error: invalid mgmt ip"
        return 1
    fi
    if [ $mgmtnetmask == "" ]; then
        print "Error: invalid mgmt netmask"
        return 1
    fi
    if [ $mgmtgateway == "" ]; then
        print "Error: invalid mgmt gateway"
        return 1
    fi
    if [ "${VSM_ISO}" == "" ]; then
        get_vsm_iso_filename
        if [ "${VSM_ISO}" == "" ]; then
            print "Error: unabled to get vsm iso file"
            return 1
        fi
    fi
    #Create the vsm directory in /var/spool
#    if [ ! -d ${VSM_VM_DIR} ]; then
#        juju-log "Directory ${VSM_VM_DIR} doesn't exists, creating it"
#        mkdir -p ${VSM_VM_DIR}
#    fi
    juju-log "iso ${VSM_ISO} domainid $domainid name ${VSM_NAME} role ${vsmrole} final $finaliso"
    ./hooks/lib/repackiso.py -i ${VSM_ISO} -d $domainid -n ${VSM_NAME} -m $mgmtip -s $mgmtnetmask -g $mgmtgateway -p $adminpasswd -r $vsmrole -f $finaliso
    if [ ! -f $finaliso ]; then
        print "Error: unable to get repackage iso file"
        return 1
    fi    
 
    return 0
}

#Generate the vsm vm xml file
function generate_vsm_vm_xml
{
    local ctrlmac mgmtmac pktmac vncport vncautoport tmp

    # By default memory is 4 GB
    VSM_MEM_STR="<memory unit='KiB'>4096000</memory>"
    mem=$(config-get n1kv-vsm-memory-size)
    if [ $mem -ne 0 ]; then
        ((mem=mem * 1024000))
        VSM_MEM_STR="<memory unit='KiB'>${mem}</memory>"
        juju-log "Memory of vsm vm is set to ${mem}"
    fi
    ctrlmac=$(config-get n1kv-vsm-ctrl-mac)
    VSM_CMAC_STR=""
    if [ "$ctrlmac" != "" ]; then
        VSM_CMAC_STR="<mac address='${ctrlmac}'/>"
    fi
    VSM_MMAC_STR=""
    mgmtmac=$(config-get n1kv-vsm-mgmt-mac)
    if [ "$mgmtmac" != "" ]; then
        VSM_MMAC_STR="<mac address='${mgmtmac}'/>"
    fi
    VSM_PMAC_STR=""
    pktmac=$(config-get n1kv-vsm-pkt-mac)
    if [ "$pktmac" != "" ]; then
        VSM_PMAC_STR="<mac address='${pktmac}'/>"
    fi
    VSM_VNC_PORT=$(config-get n1kv-vsm-vnc-port)
    VSM_VNC_AUTO="no"
    if [ "${VSM_VNC_PORT}" != "-1" ]; then
        VSM_VNC_AUTO="yes"
    fi
    juju-log "Compile the vsm_vsm.xml from the template"
    juju-log "mem ${VSM_MEM_STR} ctrlmac ${VSM_CMAC_STR} mgmtmac ${VSM_MMAC_STR} pktmac ${VSM_PMAC_STR} vnc ${VSM_VNC_PORT} auto ${VSM_VNC_AUTO}"
    cheetah fill --env --oext compiled templates/${VSM_VM_XML}.tmpl
    tmp="templates/${VSM_VM_XML}.compiled"
    if [ ! -f $tmp ]; then
        print "Error: unable to create vsm template"
        return 1
    fi
    cp ${tmp} ${VSM_VM_DIR}/${VSM_VM_XML}
    juju-log "${VSM_VM_XML} creation done" 
}

function add_remote_repo
{
    local src arr_source key deb_sources deb_source No_repos i

    juju-log "Add remote repo"

    # remove old repos
    rm -f /etc/apt/sources.list.d/springfield-ppa.list

    # get the source from input config.
    src=$(config-get n1kv-source)
    if [ "$src" == "distro" ]; then
        juju-log "n1k-source is distro"
        exit 0
    fi

    set -e
    arr_source=($src)
    if [ ${arr_source[0]} == "deb" ];then
        key=`cut -d "|" -f 2 <<< "$src"`
        deb_sources=`cut -d "|" -f 1 <<< "$src"`
        No_repos=`awk -F',' '{ print NF }' <<<"$deb_sources"`
        i=1
        while [ "$No_repos" -ne "0" ]; do
            deb_source=`cut -d "," -f $i <<< "$deb_sources"`
            echo $deb_source >> /etc/apt/sources.list.d/springfield-ppa.list
            i=$((i + 1))
            No_repos=$((No_repos - 1))
        done

        apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $key
    fi
    set +e
}

function download_vsm_iso_from_ppa
{
    local iso

    juju-log "Do apt-get update"
    set -e
    apt-get update
    set +e
    juju-log "Download the nexus-1000v-iso"
    apt-get install nexus-1000v-iso
    iso=`apt-cache policy nexus-1000v-iso | grep -c "Installed: (none)"`
    if [ $iso -eq 1 ]; then
        juju-log "Error installing nexus-1000v-iso"
        return 1
    fi
    get_vsm_iso_filename
}

#
# Given a specific version of the VSM (n1kv-version), 
# get the debian package a given local place (n1kv-local-repo)
# and install it.
# If not version is provided does nothing
# If version is provided and it cannot get the package or 
# it cannot install it, then returns 1 
#
function add_local_repo
{
    local package

    if [ "$VERSION" == "" ]; then
        juju-log "Error: Please specify version if using local repo"
        return 0
    fi

    if [ "$LOCAL_REPO" == "" ]; then
        juju-log "Error: n1kv-local-repo not specified"
        return 1
    fi

    juju-log "Add local repo"

    if [ ! -d "$isofilepath" ]; then
        mkdir $isofilepath
    fi

    cd $isofilepath
    package="${LOCAL_REPO}/nexus-1000v-iso_${VERSION}_amd64.deb"
    status=`wget -q $package`
    if [ $? -ne 0 ]; then
        juju-log "Error: couldn't get $package"
        return 1
    fi
    juju-log "Download $package into $isofilepath"

    /usr/bin/dpkg -i $package
    /usr/bin/dpkg -s nexus-1000v-iso | grep -c '^Status: install ok installed'
    if [ $? -eq 0 ]; then
        juju-log "Error trying to install $package"
        return 1
    fi
    juju-log "VSM is succesfully installed from local source"
    get_vsm_iso_filename

    return 0
}

function qemu_img_create
{
    juju-log "Check and create the qemu-img"

    is_vsm_vm_running
    if [ $? -eq 0 ]; then
        set -e
        /usr/bin/qemu-img create -f raw $diskfile ${disksize}G
        set +e
        juju-log "qemu-img create done"
    fi
}

juju-log "config-change hook: iso_dir: ${VSM_ISO_DIR}, iso: ${VSM_ISO}, version: ${VERSION}"

# Check if ovs is install hook was not succesful previously
if [ ! -d ${VSM_VM_DIR} ]; then
    hooks/install
fi      

# If we already downloaded the packages, then no need to do it again
if [ ! -f ${VSM_ISO_DIR}/*.iso ]; then    
    if [ "${VERSION}" == "" ]; then
        add_remote_repo
        download_vsm_iso_from_ppa
    else 
        add_local_repo
    fi
    if [ $? -ne 0 ]; then
        juju-log "Error downloading the sources"
        exit 1
    fi
fi

start_openvswitch
if [ $? -eq 0 ]; then
   update_ovs_interfaces
fi

is_vsm_vm_created
if [ $? -eq 0 ]; then
    juju-log "Going to repackage and create vsm vm"
    repack_iso
    if [ $? -eq 1 ]; then
        juju-log "Error: couldn't repackage vsm iso"
        exit 1
    fi
    generate_vsm_vm_xml
    if [ $? -eq 1 ]; then
        juju-log "Error: couldn't generate vsm xml file"
        exit 1
    fi
    qemu_img_create
    
    create_vsm_vm 
    if [ $? -eq 1 ]; then
        juju-log "Error: couldn't create vsm vm"
        exit 1
    fi
fi

is_vsm_vm_running
if [ $? -eq 0 ]; then 
    start_vsm_vm
    if [ $?  -eq 1 ]; then
        juju-log "Error: Unable to start VSM VM"
        exit 1
    fi
fi

juju-log "vsm vm successfully running"

hooks/dvs-relation-joined
